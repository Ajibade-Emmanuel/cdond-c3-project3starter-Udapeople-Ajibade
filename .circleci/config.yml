version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      Workflow_ID:
        type: string
        default: "${CIRCLE_WORKFLOW_ID:0:7}"
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.Workflow_ID >>
            aws s3 rm s3://udapeople-<<parameters.Workflow_ID>> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.Workflow_ID >>

  remove-bucket-contents:
    description: Remove contents of bucket
    parameters:
      bucket_name:
        type: string
        default: "${CIRCLE_WORKFLOW_ID:0:7}"
    steps:
      - run:
          name: Remove contents of bucket
          when: on_fail
          command: |
             # your code here
             aws s3 rm s3://udapeople-<< parameters.bucket_name >> --recursive
  
  revert-migrations:
    description: Revert the last migration
    parameters:
      Workflow_ID:
        type: string
        default: "${CIRCLE_WORKFLOW_ID:0:7}"
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure  https://kvdb.io/QEJEyEvRANuKVVDM2HzsD6/migration_<< parameters.Workflow_ID >>)
            echo $SUCCESS
            # Logic for reverting the database state
            if (( $SUCCESS == 1 ));
            then
                cd ~/project/backend
                npm install
                npm run migrations:revert
            fi
 
  awscli:
    description: Install AWS CLI v2
    steps:
      - run:
          name: Install AWS CLI v2
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
  
  ansible:
    description: Install Ansible
    steps:
      - run:
          name: Install Ansible
          command: |
            sudo apt update
            sudo apt install software-properties-common -y
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible -y
  
  nodejs:
    description: Install Node.js 13.8.0
    steps:
      - run:
          name: Install Node.js 13.8.0
          command: |
            # Install Node.js LTS version as our base Node.js version
            curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
            sudo apt install -y nodejs
            # Use n version manager to use Node.js v13.8.0
            sudo npm install --global n
            sudo n 13.8.0

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-test]
      - run:
          name: run front-end test
          command: |
            cd frontend
            npm install
            npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-test]
      - run:
          name: run back-end test
          command: |
            cd backend
            npm install
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-scan]
      - run:
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-scan]
      - run:
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: install tar and gzip
          command: |
            yum update -y
            yum install tar -y
            yum install gzip -y

      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople \
      
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople \
      
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> ~/project/.circleci/ansible/inventory.txt
              cat ~/project/.circleci/ansible/inventory.txt
      
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      
      - destroy-environment
  
  configure-infrastructure:
    docker:
      - image: python:3.10-alpine3.16
    steps:
      - checkout

      - add_ssh_keys:
          fingerprints: ["d9:5e:d2:71:ad:88:79:06:5e:6a:27:18:6a:0d:8b:f6"]

      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            apk add --update tar
            apk add --update gzip

      - attach_workspace:
          at: ~/

      - run:
          name: configure server
          command: |
            echo NODE_ENV=production > ~/project/backend/.env
            echo VERSION: "1" >> ~/project/backend/.env
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> ~/project/backend/.env
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ~/project/backend/.env
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> ~/project/backend/.env
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> ~/project/backend/.env
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR  >> ~/project/backend/.env
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ~/project/backend/.env
            echo TYPEORM_PORT=$TYPEORM_PORT >> ~/project/backend/.env
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ~/project/backend/.env
            echo TYPEORM_HOST=$TYPEORM_HOST >> ~/project/backend/.env
            cat ~/project/backend/.env
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
          no_output_timeout: 30m

      - persist_to_workspace:
          root: ~/
          paths:
            - project/backend/.env
      
      - destroy-environment
 
  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      
      - restore_cache:
          keys: [backend-scan]
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
            echo "has been executed successfully." >> migrations_dump.txt
            cat migrations_dump.txt
      
      - run:
          name: Send migration status to kvdb.io
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then  
                curl -k https://kvdb.io/QEJEyEvRANuKVVDM2HzsD6/migration_$\{CIRCLE_WORKFLOW_ID:0:7\}  -d '1'    
            fi

      - destroy-environment
      
      - revert-migrations

  deploy-frontend:
    docker:
      - image: python:3.10-alpine3.16

    steps:
      - checkout

      - run:
          name: Install Dependencies
          command: |
            apk add --update --no-cache tar
            apk add --update --no-cache gzip
            apk add --update --no-cache nodejs
            apk add --update --no-cache npm
            apk add --update --no-cache aws-cli
            apk add --update --no-cache curl

      - run:
          name: Get Backend Url
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name, Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL =${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env

      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive

      - destroy-environment

      - revert-migrations

  deploy-backend:
    docker:
      - image: python:3.10-alpine3.16

    steps:
      - checkout

      - add_ssh_keys:
            fingerprints: [d9:5e:d2:71:ad:88:79:06:5e:6a:27:18:6a:0d:8b:f6]

      - attach_workspace:
            at: ~/

      - restore_cache:
            keys: [backend-build]

      - run:
            name: Install dependencies
            command: |
              apk add --update --no-cache ansible tar gzip nodejs npm curl aws-cli

      - run:
            name: Deploy Backend
            command: |

              pwd
              cd backend
              touch .env
              echo ENVIRONMENT=production >> ".env"
              echo TYPEORM_CONNECTION=postgres >> ".env"
              echo TYPEORM_MIGRATIONS_DIR=./migrations >> ".env"
              echo TYPEORM_ENTITIES=./modules/domain/**/*.entity{.ts,.js} > ".env"
              echo TYPEORM_MIGRATIONS=./migrations/*.ts >> ".env"
              echo NODE_ENV=production >> ".env"
              echo TYPEORM_HOST=$TYPEORM_HOST >> ".env"
              echo TYPEORM_PORT=$TYPEORM_PORT >> ".env"
              echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ".env"
              echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ".env"
              echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ".env"

              pwd
              ls -al

              npm i
              npm run build
              cd ..

              pwd
              ls -al

              tar -C backend -czvf artifact.tar.gz .
              
              cd .circleci/ansible

              echo "Contents  of the inventory.txt file is -------"
              cat inventory.txt
              ansible-playbook -i inventory.txt deploy-backend.yml

      - destroy-environment

      - revert-migrations
  
  smoke-test:
    docker:
      - image: python:3.10-alpine3.16
    
    steps:
      - checkout
      
      - run:
          name: Install dependencies
          command: |
            apk add --update --no-cache curl aws-cli nodejs npm

      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query "Reservations[*].Instances[*].PublicDnsName" \
            --output text)
            echo "${API_URL}"
            export API_URL="http://${BACKEND_IP}:3030"            

      - run:
          name: Backend smoke test.
          command: |
            if [[ 'ok' =~ $(curl -s --connect-timeout 5 http://${BACKEND_IP}:3030/api/status | grep -o ok) ]];then return 0 else return 1;fi
            # if curl "${API_URL}/api/status" | grep "ok"
            # then
            #     return 0
            # else
            #     return 1
            # fi

      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
                # Change this to 0 after the job fails
              return 0
            else
              return 1
            fi

      - revert-migrations
      
      - remove-bucket-contents
      
      - destroy-environment

  cloudfront-update:
    docker:
      - image: amazon/aws-cli 

    steps:
      - checkout

      - run:
          name: Install dependencies
          command: |
            yum install tar gzip -y

      - run:
          name: Get old stack workflow id
          command: |
            export OldWorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text | tail -c 8)
            echo $OldWorkflowID >> ~/project/OldWorkflowID.txt
            cat ~/project/OldWorkflowID.txt

      - persist_to_workspace:
          root: ~/
          paths:
            - project/OldWorkflowID.txt

      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name InitialStack \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople

      - revert-migrations

      - remove-bucket-contents

      - destroy-environment 

  # cleanup:
  #     docker:
  #       - image: amazon/aws-cli

  #     steps:
  #       - checkout

  #       - run:
  #           name: Get old stack workflow id and remove old stacks and bucket contents
  #           command: |
  #             # Fetch the Old workflow ID
  #             export OldWorkflowID=$(aws cloudformation \
  #               list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
  #                 --no-paginate --output text)
  #             echo OldWorkflowID: "${OldWorkflowID}"
  #             echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
  #             # Fetch the stack names
  #             export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
  #             --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
  #             STACKSID=($(aws cloudformation describe-stacks --query "Stacks[*].Outputs[?OutputKey==\`ID\`].OutputValue" --no-paginate --output text))
  #             echo Stack ids: "${STACKSID[@]}"
  #             echo Stack names: "${STACKS[@]}"
  #             echo $OldWorkflowID ${CIRCLE_WORKFLOW_ID:0:7}
              
  #                     # for (( index=0; index<${#STACKS[@]}; index+=2 )) 
  #                     # do
  #                     #   if [[ "${CIRCLE_WORKFLOW_ID:0:7}" != "${STACKS[index]##*-}" ]]
  #                     #   then
  #                     #       # your code here
  #                     #       echo "----------Deletes cofirmed------------"
  #                     #       aws s3 rm "s3://udapeople-${STACKS[index]##*-}" --recursive
  #                     #       aws cloudformation delete-stack --stack-name "${STACKS[index]}"
  #                     #       aws cloudformation delete-stack --stack-name "${STACKS[((++index))]}"
  #                     #   else
  #                     #       echo "----------Cannot cleanup------------"
  #                     #   fi
  #                     # done
              
  #             for i in "${STACKSID[@]}"
  #             do
  #               if [[ "${CIRCLE_WORKFLOW_ID:0:7}" != "$i" ]]
  #               then
  #                   echo "----------------Delete confirmed-----------"
  #                   aws s3 rm "s3://udapeople-$i" --recursive
  #                   aws cloudformation delete-stack --stack-name "udapeople-frontend-$i"
  #                   aws cloudformation delete-stack --stack-name "udapeople-backend-$i"
  #               else
  #                   echo  "----------------Cannot cleanup------------"
  #               fi
  #             done










workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]